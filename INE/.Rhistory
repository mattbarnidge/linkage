tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
#Trait Models
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
#Multicollinearity Diagnostics
car::vif(tm1)
car::vif(tm2)
car::vif(tm3)
car::vif(tm4)
#Model Summaries
summary(tm1)
summary(tm2)
summary(tm3, cor=FALSE)
summary(tm4, cor=FALSE)
#State Models
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
#Multicollinearity Diagnostics
car::vif(sm1)
car::vif(sm2)
#Model summaries
summary(sm1, cor=FALSE)
summary(sm2, cor=FALSE)
library(lme4)
library(lmerTest)
setwd("~/Desktop")
load("ine1.Rdata")
load("ine2.Rdata")
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
setwd("~/Documents/GitHub/linkage/INE")
library(lme4)
library(lmerTest)
setwd("~/Documents/GitHub/linkage/INE")
load("ine1.Rdata")
load("ine2.Rdata")
#Trait Models
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
#State Models
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
load("EMCP20_coded.Rdata")
hist(d$sminc)
hisst(d$smnews)
hist(d$smnews)
hist(d$smincexp2)
d$ine1 = sqrt(d$sminc*d$smincexp2)
d$ine2 = sqrt(d$smnews*d$smincexp2)
hist(d$ine1)
hist(d$ine2)
library(lme4)
library(lmerTest)
setwd("~/Documents/GitHub/linkage/INE")
load("ine1.Rdata")
load("ine2.Rdata")
names(x1)
names(x2)
summary(x2$engagement)
sd(x2$engagement)
var(x2$engagement)
var(x2$net_sent)
var(x2$topic_freq)
library(lme4)
library(lmerTest)
setwd("~/Documents/GitHub/linkage/INE")
load("ine1.Rdata")
load("ine2.Rdata")
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
summary(tm1)
summary(tm2)
summary(tm3, cor=FALSE)
summary(tm1)
summary(tm3, cor=FALSE)
summary(tm4, cor=FALSE)
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
summary(sm1, cor=FALSE)
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and Load Data
setwd("~/Documents/GitHub/linkage/INE")
load("EMCP20_coded.Rdata")
table(d$sm.newsintent)
d$mot = abs(d$sm.newsintent - 1)
table(d$mot)
d$news = d$smnews #social media news (trait)
d$polinfo = d$sminc #social media political information (trait)
d$inc = d$smincexp2 #incidentality
table(d$story.purp.sk)
table(d$story.purp)
d$recall = d$story.aware #recall of embedded story (state)
d$incexp = abs(d$story.purp - 1) #incidentally encountered story (no skips)
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and Load Data
setwd("~/Documents/GitHub/linkage/INE")
load("EMCP20_coded.Rdata")
#Exposure and Incidentality:
#trait-like variables
d$news = d$smnews #social media news
d$pol = d$sminc #social media political information
d$inc = d$smincexp2 #extent of incidentality
d$mot = abs(d$sm.newsintent - 1) #background motivation  (1 = sm as social/other, 0 = sm as news source)
d$ipe = sqrt(d$sminc*d$smincexp2) #pol info by incidentality
d$ine = sqrt(d$smnews*d$smincexp2) #news use by incidentality
d$recall = d$story.aware #recall of embedded story (state)
d$incexp = abs(d$story.purp - 1) #incidentally encountered story (no skips)
table(d$incexp)
table(d$recall)
422+375
d$incexp.sk = ifelse(d$recall == 1 & d$incexp == 0, 1, 0)
table(d$incexp.sk)
375+1632
d$incexp.t = ifelse(d$recall == 1 & d$incexp == 0, "inc",
ifelse(d$recall == 1 & d$incexp == 1, "purp",
"none"))
table(d$incexp.t)
class(d$incexp.t)
d$incexp.t = factor(d$incexp.t, levels=c("none", "inc", "purp"))
table(d$incexp.t)
d$incexp.t2 = factor(d$incexp.t, levels=c("inc", "none", "purp"))
table(d$incexp.t2)
wm1 = nnet::multinom(incexp.t2 ~ mot, data=d)
summary(wm1)
wm1a = nnet::multinom(incexp.t ~ mot, data=d)
wm1b = nnet::multinom(incexp.t2 ~ mot, data=d)
summary(wm1)
(1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
(1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
summary(wm1a)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
d$incexp.t2 = factor(d$incexp.t, levels=c("inc", "none", "purp"))
wm1b = nnet::multinom(incexp.t2 ~ mot, data=d)
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and Load Data
setwd("~/Documents/GitHub/linkage/INE")
load("EMCP20_coded.Rdata")
#Exposure and Incidentality:
#trait-like variables
d$news = d$smnews #social media news
d$pol = d$sminc #social media political information
d$inc = d$smincexp2 #extent of incidentality
d$mot = d$sm.newsintent #background motivation  (1 = sm as new source, 0 = sm as other)
d$ipe = sqrt(d$sminc*d$smincexp2) #pol info by incidentality
d$ine = sqrt(d$smnews*d$smincexp2) #news use by incidentality
d$recall = d$story.aware #recall of embedded story (state)
d$incexp = abs(d$story.purp - 1) #incidentally encountered story (no skips)
d$incexp.sk = ifelse(d$recall == 1 & d$incexp == 0, 1, 0)
d$incexp.t = ifelse(d$recall == 1 & d$incexp == 0, "inc",
ifelse(d$recall == 1 & d$incexp == 1, "purp",
"none"))
d$incexp.t = factor(d$incexp.t, levels=c("none", "inc", "purp"))
d$incexp.t2 = factor(d$incexp.t, levels=c("inc", "none", "purp"))
wm1a = nnet::multinom(incexp.t ~ mot, data=d)
wm1b = nnet::multinom(incexp.t2 ~ mot, data=d)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and Load Data
setwd("~/Documents/GitHub/linkage/INE")
load("EMCP20_coded.Rdata")
#Exposure and Incidentality:
#trait-like variables
d$news = d$smnews #social media news
d$pol = d$sminc #social media political information
d$inc = d$smincexp2 #extent of incidentality
d$mot = d$sm.newsintent #background motivation  (1 = sm as new source, 0 = sm as other)
d$ipe = sqrt(d$sminc*d$smincexp2) #pol info by incidentality
d$ine = sqrt(d$smnews*d$smincexp2) #news use by incidentality
d$recall = d$story.aware #recall of embedded story (state)
d$incexp = d$story.purp #purposefully looked for story (no skips)
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and Load Data
setwd("~/Documents/GitHub/linkage/INE")
load("EMCP20_coded.Rdata")
#Exposure and Incidentality:
#trait-like variables
d$news = d$smnews #social media news
d$pol = d$sminc #social media political information
d$inc = d$smincexp2 #extent of incidentality
d$mot = d$sm.newsintent #background motivation  (1 = sm as new source, 0 = sm as other)
d$ipe = sqrt(d$sminc*d$smincexp2) #pol info by incidentality
d$ine = sqrt(d$smnews*d$smincexp2) #news use by incidentality
d$recall = d$story.aware #recall of embedded story (state)
d$purpexp = d$story.purp #purposefully looked for story (no skips)
table(d$purpexp)
d$incexp.sk = ifelse(d$recall == 1 & d$purpexp == 0, 1, 0)
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and Load Data
setwd("~/Documents/GitHub/linkage/INE")
load("EMCP20_coded.Rdata")
#Exposure and Incidentality:
#trait-like variables
d$news = d$smnews #social media news
d$pol = d$sminc #social media political information
d$inc = d$smincexp2 #extent of incidentality
d$mot = abs(d$sm.newsintent - 1) #background motivation something other than news
d$ipe = sqrt(d$sminc*d$smincexp2) #pol info by incidentality
d$ine = sqrt(d$smnews*d$smincexp2) #news use by incidentality
table(d$mot)
d$recall = d$story.aware #recall of embedded story (state)
d$incexp = abs(d$story.purp - 1)
table(d$incexp)
d$incexp.sk = ifelse(d$recall == 1 & d$incexp == 1, 1, 0) #include skips
table(d$incexp.sk)
d$incexp.f1 = ifelse(d$recall == 1 & d$incexp == 1, "inc",
ifelse(d$recall == 1 & d$incexp == 0, "purp",
"none"))
d$incexp.f1 = factor(d$incexp.t, levels=c("none", "inc", "purp"))
d$incexp.f2 = factor(d$incexp.t, levels=c("inc", "none", "purp"))
d$incexp.f1 = factor(d$incexp.f1, levels=c("none", "inc", "purp"))
d$incexp.f2 = factor(d$incexp.f1, levels=c("inc", "none", "purp"))
wm1a = nnet::multinom(incexp.f1 ~ mot, data=d)
wm1b = nnet::multinom(incexp.fs2 ~ mot, data=d)
wm1a = nnet::multinom(incexp.f1 ~ mot, data=d)
wm1b = nnet::multinom(incexp.f2 ~ mot, data=d)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
wm1a = nnet::multinom(incexp.f1 ~ mot + pol + inc, data=d)
wm1b = nnet::multinom(incexp.f2 ~ mot + pol + inc, data=d)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
wm1a = nnet::multinom(incexp.f1 ~ mot + pol*inc, data=d)
wm1b = nnet::multinom(incexp.f2 ~ mot + pol*inc, data=d)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
wm1a = nnet::multinom(incexp.f1 ~ mot + ipe, data=d)
wm1b = nnet::multinom(incexp.f2 ~ mot + ipe, data=d)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
wm1a = nnet::multinom(incexp.f1 ~ mot + ine, data=d)
wm1b = nnet::multinom(incexp.f2 ~ mot + ine, data=d)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
wm1a = nnet::multinom(incexp.f1 ~ mot + inc, data=d)
wm1b = nnet::multinom(incexp.f2 ~ mot + inc, data=d)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
table(d$sminc)
table(d$smincexp2)
table(d$sminc-1)
d$ipe = sqrt((d$sminc-1)*(d$smincexp2-1))
hist(d$ipe)
d$ine = sqrt((d$smnews-1)*(d$smincexp2-1))
wm1a = nnet::multinom(incexp.f1 ~ mot + ipe, data=d)
wm1b = nnet::multinom(incexp.f2 ~ mot + ipe, data=d)
summary(wm1a); (1 - pnorm(abs(summary(wm1a)$coefficients/summary(wm1a)$standard.errors), 0, 1)) * 2
summary(wm1b); (1 - pnorm(abs(summary(wm1b)$coefficients/summary(wm1b)$standard.errors), 0, 1)) * 2
wm2 = lm(ipe ~ mot, data=d)
summary(wm2)
hist(sqrt((d$sminc-1)*(d$smincexp2-1)))
hist(sqrt(d$sminc*d$smincexp2))
