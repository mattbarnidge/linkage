setwd("~/Desktop")
load("EMCP20_coded.Rdata")
#DVs:
d$ine1 = sqrt(d$sminc*d$smincexp2)
d$ine2 = sqrt(d$smnews*d$smincexp2)
table(d$ine1); hist(d$ine1) #trait; encountering pol info by incidentality
table(d$ine2); hist(d$ine2) #trait; general news use by incidentality
table(d$smnews); hist(d$smnews) #trait; social media news use
table(d$engage); hist(d$engage); #trait: news engagement
table(d$story.aware) #state; recall of embedded story
table(d$story.engage.sk); hist(d$story.engage.sk) #state; story engagement
with(d, cor(cbind(ine1, ine2, smnews, story.aware),
use="complete.obs", method="pearson")) #r1 = .60, r2 = .04, r3 = .05, r4 = .50, r5 = .11s
#Individual Factors 1: Cognitive
table(d$know); hist(d$know) #trait; political knowledge
table(d$nml); hist(d$nml) #trait; news media literacy
table(d$story.mult.sk); hist(d$story.mult.sk) #state: multiple exposures (proxy for cognitive load/ prior knowledge)
with(d, ltm::cronbach.alpha(cbind(curfact.self,
curfact.orgs,
curfact.frnd,
curfact.hist,
curfact.popu), na.rm=TRUE))
d$sml = with(d, rowMeans(cbind(curfact.self,
curfact.orgs,
curfact.frnd,
curfact.hist,
curfact.popu), na.rm=TRUE))
table(d$sml); hist(d$sml) #trait: social media news literacy
#Individual Factors 2: Identity/Demographics
table(d$age) #trait; age
table(d$female) #trait; gender
table(d$poc) #trait; race
table(d$edu) #trait; ses
table(d$inc) #trait; ses
table(d$ideo) #trait; ideology
table(d$pid) #trait; partisanship
d$ideo.ext = abs(d$ideo) #trait; ideological extremity
d$pid.str = abs(d$pid) #trait; strength of partisanship
table(d$eff.int); hist(d$eff.int) #trait: internal efficacy
d$storypart = d$storypart - 6
d$storypart.ext = abs(d$storypart)
table(d$storypart); hist(d$storypart) #state; perceived ideology of story
table(d$storypart.ext); hist(d$storypart.ext) #state; perceived ideological extremity of story
table(d$storycandeval); hist(d$storycandeval) #state; issue salience
#Environmental Perceptions
table(d$sm.newsintent) #trait
table(d$story.purp.sk) #state
#Motivation
table(d$int); hist(d$int) #trait: interest
table(d$smfollow); hist(d$smfollow) #trait: follow for news
table(d$avoid); hist(d$avoid) #trait; avoid news
d$cong <- NA
d$cong = ifelse(d$story.part == 1 & d$ideo > 0, 1, d$cong)
d$cong = ifelse(d$story.part == 0 & d$ideo < 0, 1, d$cong)
d$cong = ifelse(d$ideo == 0, 0, d$cong)
d$cong = ifelse(d$story.part == 1 & d$ideo < 0, -1, d$cong)
d$cong = ifelse(d$story.part == 0 & d$ideo > 0, -1, d$cong)
table(d$cong) #state: congruence of exposure
table(d$storyemo.pos); hist(d$storyemo.pos) #state: perceived emotionality positive
table(d$storyemo.neg); hist(d$storyemo.neg) #state: perceived emotionality negative
with(d, ltm::cronbach.alpha(cbind(storyemo.joy,
storyemo.enth,
storyemo.ang,
storyemo.fear), na.rm=TRUE))
d$storyemo = with(d, rowMeans(cbind(storyemo.joy,
storyemo.enth,
storyemo.ang,
storyemo.fear), na.rm=TRUE))
table(d$storyemo); hist(d$storyemo) #state: perceived emotionality
#Social Networks
table(d$sm.ns); hist(d$sm.ns) #trait; network size
table(d$sm.div.occ); hist(d$sm.div.occ) #trait: network diversity structural
table(d$sm.div.tie); hist(d$sm.div.tie) #trait: network diversity perceptual
table(d$grp); hist(d$grp) #trait: group membership
table(d$smcur); hist(d$smcur) #state: active curation
d$curatoreval.sk <- NA
d$curatoreval.sk <- ifelse(d$story.aware == 1, d$curatoreval, d$curatoreval.sk)
d$curatoreval.sk <- ifelse(d$story.aware == 0, 50, d$curatoreval.sk)
table(d$curatoreval.sk); hist(d$curatoreval.sk) #state: curator eval
#Media Systems
#engagement #state
#sentiment #state
#salience #state
d$alg[d$alg==2] <- 1
table(d$alg) #trait; algorithmic interest
table(d$int.freq); hist(d$int.freq) #trait: internet frequency
table(d$sm.freq); hist(d$sm.freq) #trait: social media frequency
#Select Variables: Trait Models
x1 <- d %>% select(ine1, ine2, smnews, engage,
know, nml, sml, int.freq, sm.freq,
age, female, poc, edu, inc, ideo, pid, ideo.ext, pid.str, eff.int,
sm.newsintent,
int, smfollow, avoid,
sm.ns, sm.div.occ, sm.div.tie, grp,
alg,
frame, weights)
#Select Variables: State Models
x2 <- d %>% select(story.aware, story.engage.sk,
story.mult.sk,
storypart, storypart.ext, storycandeval,
story.purp.sk,
cong, storyemo.pos, storyemo.neg, storyemo, storycred,
smcur, curatoreval.sk,
frame, weights)
#Multiple Imputation: Trait Models
t1 <- mice::mice(x1, m=1, maxit=50, meth='pmm', seed=500)
x1 <- mice::complete(t1, 1)
rm(t1)
#Multiple Imputation: State Models
t2 <- mice::mice(x2, m=1, maxit=50, meth='pmm', seed=500)
x2 <- mice::complete(t2, 1)
rm(t2)
#Group Center Variables: Trait Models
x1 <- x1 %>%
group_by(frame) %>%
mutate(across(know:alg,
~(as.numeric(scale(., scale = F))),
.names = "{.col}.c"))
#Group Center Variables: State Models
x2 <- x2 %>%
group_by(frame) %>%
mutate(across(story.mult.sk:curatoreval.sk,
~(as.numeric(scale(., scale = F))),
.names = "{.col}.c"))
#Merge with Second Level Variables
load("macro_fakenews.Rdata")
x2 = merge(fakenews_vars, x2, by = "frame", all.y = TRUE)
rm(fakenews_vars)
#Rescale Second Level Predictors
x2$engagement = scales::rescale(x2$engagement, to=c(0,1))
x2$net_sent = scales::rescale(x2$net_sent, to=c(0,1))
x2$topic_freq = scales::rescale(x2$topic_freq, to=c(0,1))
#Save Datasets
save(x1, file="ine1.Rdata")
save(x2, file="ine2.Rdata")
#Test whether frame matters
null = lm(ine1 ~ 1, data=x1)
full = lmer(ine1 ~ 1 + (1 | frame), data=x1)
AIC(null, full); BIC(null, full); lmtest::lrtest(null, full)
rm(null, full)
null = lm(ine2 ~ 1, data=x1)
full = lmer(ine2 ~ 1 + (1 | frame), data=x1)
AIC(null, full); BIC(null, full); lmtest::lrtest(null, full)
rm(null, full)
null = lm(smnews ~ 1, data=x1)
full = lmer(smnews ~ 1 + (1 | frame), data=x1)
AIC(null, full); BIC(null, full); lmtest::lrtest(null, full)
rm(null, full)
null = lm(engage ~ 1, data=x1)
full = lmer(engage ~ 1 + (1 | frame), data=x1)
AIC(null, full); BIC(null, full); lmtest::lrtest(null, full)
rm(null, full)
null = lm(story.aware ~ 1, data=x2)
full = lmer(story.aware ~ 1 + (1 | frame), data=x2)
AIC(null, full); BIC(null, full); lmtest::lrtest(null, full)
rm(null, full)
null = lm(story.engage.sk ~ 1, data=subset(x2, story.aware == 1))
full = lmer(story.engage.sk ~ 1 + (1 | frame), data=subset(x2, story.aware == 1))
AIC(null, full); BIC(null, full); lmtest::lrtest(null, full)
rm(null, full)
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
#Trait Models
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
#Multicollinearity Diagnostics
car::vif(tm1)
car::vif(tm2)
car::vif(tm3)
car::vif(tm4)
#Model Summaries
summary(tm1)
summary(tm2)
summary(tm3, cor=FALSE)
summary(tm4, cor=FALSE)
#State Models
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
#Multicollinearity Diagnostics
car::vif(sm1)
car::vif(sm2)
#Model summaries
summary(sm1, cor=FALSE)
summary(sm2, cor=FALSE)
library(lme4)
library(lmerTest)
setwd("~/Desktop")
load("ine1.Rdata")
load("ine2.Rdata")
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
setwd("~/Documents/GitHub/linkage/INE")
library(lme4)
library(lmerTest)
setwd("~/Documents/GitHub/linkage/INE")
load("ine1.Rdata")
load("ine2.Rdata")
#Trait Models
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
#State Models
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
load("EMCP20_coded.Rdata")
hist(d$sminc)
hisst(d$smnews)
hist(d$smnews)
hist(d$smincexp2)
d$ine1 = sqrt(d$sminc*d$smincexp2)
d$ine2 = sqrt(d$smnews*d$smincexp2)
hist(d$ine1)
hist(d$ine2)
library(lme4)
library(lmerTest)
setwd("~/Documents/GitHub/linkage/INE")
load("ine1.Rdata")
load("ine2.Rdata")
names(x1)
names(x2)
summary(x2$engagement)
sd(x2$engagement)
var(x2$engagement)
var(x2$net_sent)
var(x2$topic_freq)
library(lme4)
library(lmerTest)
setwd("~/Documents/GitHub/linkage/INE")
load("ine1.Rdata")
load("ine2.Rdata")
tm1 = lm(ine1 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm2 = lm(ine2 ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c,
data = x1, weights = weights)
tm3 = lmer(smnews ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = x1, weights = weights,
control = lmerControl("bobyqa"))
tm4 = lmer(engage ~
know.c + nml.c + sm.freq.c +
age.c + female.c + poc.c + edu.c + inc.c + pid.str.c + eff.int.c +
sm.newsintent.c +
int.c + smfollow.c + avoid.c +
sm.ns.c + sm.div.occ.c + grp.c +
alg.c +
(1 | frame),
data = subset(x1, smnews > 1), weights = weights,
control = lmerControl("bobyqa"))
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
summary(tm1)
summary(tm2)
summary(tm3, cor=FALSE)
summary(tm1)
summary(tm3, cor=FALSE)
summary(tm4, cor=FALSE)
sm1 = glmer(story.aware ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = x2, family = poisson, weights = weights,
control=glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
sm2 = lmer(story.engage.sk ~
storypart.ext.c + storycandeval.c +
story.purp.sk.c +
cong.c + storyemo.c + storycred.c +
smcur.c + curatoreval.sk.c +
engagement + net_sent + topic_freq +
(1 | frame),
data = subset(x2, story.aware == 1), weights = weights,
control=lmerControl(optimizer="bobyqa"))
summary(sm1, cor=FALSE)
