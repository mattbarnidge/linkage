library(tidyr)
#Set WD and load data
setwd("~/Documents/GitHub/linkage/INE")
load("ine.Rdata")
with(x, round(cor(cbind(mot, int, fol, alg),
use="complete.obs"), digits=2))
x$x1 = x$mot + 1
x$x2 = round(x$int, digits = 0)
x$x3 = round(x$fol, digits = 0)
x$x4 = x$alg + 1
f <- cbind(x1, x2, x3, x4) ~ 1
library(poLCA)
#Write function to find best fitting model
#min = 2 classes, max = 5 classes (trouble with convergence above 5)
min_bic <- 100000
for(i in 2:5){
lc <- poLCA(f, x, nclass=i,
maxiter=3000, tol=1e-5,
na.rm=FALSE, nrep=10,
verbose=TRUE, calc.se=TRUE)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and load data
setwd("~/Documents/GitHub/linkage/INE")
load("ine.Rdata")
#Correlations among indicators of involvement (.34 < r < .52)
with(x, round(cor(cbind(mot, int, fol, alg),
use="complete.obs"), digits=2))
#Recode variables for LCA (LCA requires non-zero integers)
x$x1 = x$mot + 1
x$x2 = round(x$int, digits = 0)
x$x3 = round(x$fol, digits = 0)
x$x4 = x$alg + 1
#Define LCA function
f <- cbind(x1, x2, x3, x4) ~ 1
#Load Library for LCA
library(poLCA)
#Write function to find best fitting model
#min = 2 classes, max = 5 classes (trouble with convergence above 5)
min_bic <- 100000
for(i in 2:5){
lc <- poLCA(f, x, nclass=i,
maxiter=3000, tol=1e-5,
na.rm=FALSE, nrep=10,
verbose=TRUE, calc.se=TRUE)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
#Print results (3-class model is best, according to BIC)
print(LCA_best_model)
#Estimate Model, re-set order based on predicted probabilities
#(biggest group first), then re-estimate models
lc <- poLCA(f, x, nclass=3,
maxiter=3000, tol=1e-5,
na.rm=TRUE,  nrep=10,
verbose=TRUE, calc.se=TRUE,
graph=TRUE) #initial model
probs.start <- poLCA.reorder(lc$probs.start,
order(lc$P, decreasing=TRUE)) #create object for order
lc <- poLCA(f, x, nclass = 3,
maxiter=3000, tol=1e-5,
na.rm=TRUE, nrep=10,
verbose=TRUE, calc.se=TRUE,
probs.start = probs.start,
graph=TRUE) #refit model with order object (probs.start)
#Clean up environment
rm(f,
i,
min_bic,
LCA_best_model,
probs.start)
detach("package:poLCA", unload=TRUE)
#Extract grouping variable and add to dataset
x$inv = as.factor(lc$predclass)
table(x$inv)
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and load data
setwd("~/Documents/GitHub/linkage/INE")
load("ine.Rdata")
#Correlations among indicators of involvement (.34 < r < .72)
with(x, round(cor(cbind(mot, int, fol, alg, cur),
use="complete.obs"), digits=2))
#Recode variables for LCA (LCA requires non-zero integers)
x$x1 = x$mot + 1
x$x2 = round(x$int, digits = 0)
x$x3 = round(x$fol, digits = 0)
x$x4 = round(x$cur, digits = 0)
x$x5 = x$alg + 1
#Define LCA function
f <- cbind(x1, x2, x3, x4, x5) ~ 1
#Load Library for LCA
library(poLCA)
#Write function to find best fitting model
#min = 2 classes, max = 5 classes (trouble with convergence above 5)
min_bic <- 100000
for(i in 2:5){
lc <- poLCA(f, x, nclass=i,
maxiter=3000, tol=1e-5,
na.rm=FALSE, nrep=10,
verbose=TRUE, calc.se=TRUE)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
#Print results (3-class model is best, according to BIC)
print(LCA_best_model)
#Estimate Model, re-set order based on predicted probabilities
#(biggest group first), then re-estimate models
lc <- poLCA(f, x, nclass=4,
maxiter=3000, tol=1e-5,
na.rm=TRUE,  nrep=10,
verbose=TRUE, calc.se=TRUE,
graph=TRUE) #initial model
probs.start <- poLCA.reorder(lc$probs.start,
order(lc$P, decreasing=TRUE)) #create object for order
lc <- poLCA(f, x, nclass = 4,
maxiter=3000, tol=1e-5,
na.rm=TRUE, nrep=10,
verbose=TRUE, calc.se=TRUE,
probs.start = probs.start,
graph=TRUE) #refit model with order object (probs.start)
#Melt Data for Visualizations
lcmodel <- reshape2::melt(lc$probs, level=2)
levels(lcmodel$Var1) = c("Mod Unmot", "Low", "Mod Mot", "High")
lcmodel$Var1 <- factor(lcmodel$Var1, levels = c("Low", "Mod Unmot", "Mod Mot", "High"))
lcmodel$L1[lcmodel$L2=="x1"] <- "Perception"
lcmodel$L1[lcmodel$L2=="x2"] <- "Interest"
lcmodel$L1[lcmodel$L2=="x3"] <- "Follows"
lcmodel$L1[lcmodel$L2=="x4"] <- "Curation"
lcmodel$L1[lcmodel$L2=="x5"] <- "Algorithm"
#Define Plot by Group
library(ggplot2)
#library(gridExtra)
zp1 <- ggplot(lcmodel, aes(x = L1, y = value, fill = Var2))
zp1 <- zp1 + geom_bar(stat = "identity", position = "stack")
zp1 <- zp1 + facet_grid(Var1 ~ .)
zp1 <- zp1 + scale_fill_grey()
#zp1 <- zp1 + scale_fill_manual(values = c("#FFFFFF", "#F5F5F5", "#ECECEC",
#                                          "#E2E2E2", "#D8D8D8", "#CECECE",
#                                          "#C1C1C1", "#B7B7B7", "#AEAEAE",
#                                          "#A1A1A1", "#949494", "#8D8D8D",
#                                          "#868686", "#7F7F7F", "#757575",
#                                          "#6C6C6C", "#646464", "#5B5B5B",
#                                          "#515151")) + theme_bw()
zp1 <- zp1 + labs(x = "Criterion Variable", y="Estimated Probability", fill ="Scale Category")
zp1 <- zp1 + theme( axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major.y=element_blank())
#zp1 <- zp1 + scale_x_discrete(labels=c("consp.n" = "Conspiracy \nBelief",
#                                       "fbel.n" = "False \nBelief",
#                                       "know.n" = "Knowledge"))
#zp1 <- zp1 + guides(fill = guide_legend(reverse=TRUE))
#zp1 <- zp1 + theme(legend.position = "none")
#Visualize
zp1
#Clean up environment
rm(f,
i,
min_bic,
LCA_best_model,
probs.start)
detach("package:poLCA", unload=TRUE)
#Extract grouping variable and add to dataset
x$inv = as.factor(lc$predclass)
levels(x$inv) = c("Mod Unmot", "Low", "Mod Mot", "High")
x$inv <- factor(x$inv, levels = c("Low", "Mod Unmot", "Mod Mot", "High"))
table(x$inv)
aov(age~inv, data=x)
summary(aov(age~inv, data=x)0
summary(aov(age~inv, data=x))
TukeyHSD(aov(age~inv, data=x))
aggregate(x$age, by=list(x$inv), mean)
aggregate(x$edu, by=list(x$inv), mean)
aggregate(x$edu, by=list(x$inv), mean)
summary(aov(edu~inv, data=x))
TukeyHSD(aov(edu~inv, data=x))
aggregate(x$inc, by=list(x$inv), mean)
summary(aov(inc~inv, data=x))
aggregate(x$edu, by=list(x$inv), mean)
aggregate(x$inc, by=list(x$inv), mean)
summary(x$edu)
summary(x$inc)
5.36-4.15
5.95-4.19
4.61-4.19
table(x$poc, x$inv)
chisq.test(table(x$poc, x$inv))
vcd::assocstats(table(x$poc, x$inv))
238/(238+356)
357/(357+451)
163/(163+250)
51/(51+142)
table(x$female, x$inv)
chisq.test(table(x$female, x$inv))
vcd::assocstats(table(x$female, x$inv))
347/(347+247)
53/(53+140)
aggregate(x$edu, by=list(x$inv), mean)
aggregate(x$inc, by=list(x$inv), mean)
table(x$poc, x$inv)
margin.table(x$poc, x$inv)
357/(357+451 )
163/(163+250)
margin.table(x$female, x$inv)
table(x$female, x$inv)
448/(448+360)
179/(179+234)
aggregate(x$ideo, x$inv, mean)
aggregate(x$ideo, by=list(x$inv), mean)
aggregate(x$pid, by=list(x$inv), mean)
aggregate(x$sm.freq, by=list(x$inv), mean)
aggregate(x$size, by=list(x$inv), mean)
aggregate(x$div, by=list(x$inv), mean)
aggregate(x$grp, by=list(x$inv), mean)
summary(x$div)
summary(x$size)
load("EMCP20_coded.Rdata")
table(d$story.engage.he)
names(d)
names(d[,976:1199])
df <- data.frame(story.click, story.scan, story.read,
story.seek, story.comm, story.disc, story.share)
df <- with(d, data.frame(story.click, story.scan, story.read,
story.seek, story.comm, story.disc, story.share))
names(df)
factanal(df, factors=2, rotation="promax")
t <- mice(df, m=1, maxit=50, meth='pmm', seed=500)
library(mice)
library(mice)
install.packages("vctrs")
library(mice)
install.packages("vctrs", type="binary")
library(mice)
t <- mice(df, m=1, maxit=50, meth='pmm', seed=500)
c <- complete(t, 1)
factanal(c, factors=2, rotation="promax")
with(d, ltm::cronbach.alpha(c))
factanal(c, factors=2, rotation="varimax")
factanal(c, factors=3, rotation="varimax")
factanal(c, factors=3, rotation="promax")
factanal(c, factors=4, rotation="promax")
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and load data
setwd("~/Documents/GitHub/linkage/INE")
load("ine.Rdata")
#Correlations among indicators of involvement (.34 < r < .52)
with(x, round(cor(cbind(mot, int, fol, alg),
use="complete.obs"), digits=2))
#Recode variables for LCA (LCA requires non-zero integers)
x$x1 = x$mot + 1
x$x2 = round(x$int, digits = 0)
x$x3 = round(x$fol, digits = 0)
x$x4 = x$alg + 1
f <- cbind(x1, x2, x3, x4) ~ 1
library(poLCA)
install.packages("polLCA")
install.packages("poLCA")
library(poLCA)
min_bic <- 100000
for(i in 2:5){
lc <- poLCA(f, x, nclass=i,
maxiter=3000, tol=1e-5,
na.rm=FALSE, nrep=10,
verbose=TRUE, calc.se=TRUE)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
print(LCA_best_model)
lc <- poLCA(f, x, nclass=3,
maxiter=3000, tol=1e-5,
na.rm=TRUE,  nrep=10,
verbose=TRUE, calc.se=TRUE,
graph=TRUE)
probs.start <- poLCA.reorder(lc$probs.start,
order(lc$P, decreasing=TRUE))
lc <- poLCA(f, x, nclass = 3,
maxiter=3000, tol=1e-5,
na.rm=TRUE, nrep=10,
verbose=TRUE, calc.se=TRUE,
probs.start = probs.start,
graph=TRUE)
lc <- poLCA(f, x, nclass = 3,
maxiter=3000, tol=1e-5,
na.rm=TRUE, nrep=10,
verbose=TRUE, calc.se=TRUE,
probs.start = probs.start,
graph=TRUE)
rm(f,
i,
min_bic,
LCA_best_model,
probs.start)
detach("package:poLCA", unload=TRUE)
x$inv = as.factor(lc$predclass)
table(x$inv)
library(lme4)
install.packages("lme4")
install.packages("lmerTest")
lm1 = lmer(ipe ~ inv +
age + female + poc + edu + inc + ideo + pid +
sm.freq + size + div + grp + cur +
(1 | frame),
data=x, weights=weights,
control=lmerControl(optimizer="bobyqa"))
library(lme4)
library(lmerTest)
lm1 = lmer(ipe ~ inv +
age + female + poc + edu + inc + ideo + pid +
sm.freq + size + div + grp + cur +
(1 | frame),
data=x, weights=weights,
control=lmerControl(optimizer="bobyqa"))
rm1 = lm(ipe ~ inv +
age + female + poc + edu + inc + ideo + pid +
sm.freq + size + div + grp + cur,
data=x, weights=weights)
summary(lm1, cor=FALSE)
summary(rm1)
options(scipen=999)
summary(lm1, cor=FALSE)
summary(rm1)
anova(lm1, rm1)
lm2 = lmer(pol ~ inv +
age + female + poc + edu + inc + ideo + pid +
sm.freq + size + div + grp + cur +
(1 | frame),
data=x, weights=weights,
control=lmerControl(optimizer="bobyqa"))
rm2 = lm(pol ~ inv +
age + female + poc + edu + inc + ideo + pid +
sm.freq + size + div + grp + cur,
data=x, weights=weights)
summary(lm2, cor=FALSE)
summary(rm2)
anova(lm2, rm2)
rm3 = lmer(ipe ~ inv +
age + female + poc + edu + inc + ideo + pid +
sm.freq + size + div + grp + cur +
(1 | frame),
data=x,
control=lmerControl(optimizer="bobyqa"))
rm4 = lmer(pol ~ inv +
age + female + poc + edu + inc + ideo + pid +
sm.freq + size + div + grp + cur +
(1 | frame),
data=x,
control=lmerControl(optimizer="bobyqa"))
summary(lm1, cor=FALSE)
summary(rm3, cor=FALSE)
summary(lm2, cor=FALSE)
summary(rm4, cor=FALSE)
#Load Libraries
library(dplyr)
library(tidyr)
#Set WD and load data
setwd("~/Documents/GitHub/linkage/INE")
load("ine.Rdata")
#Correlations among indicators of involvement (.34 < r < .72)
with(x, round(cor(cbind(mot, int, fol, alg, cur),
use="complete.obs"), digits=2))
#Recode variables for LCA (LCA requires non-zero integers)
x$x1 = x$mot + 1
x$x2 = round(x$int, digits = 0)
x$x3 = round(x$fol, digits = 0)
x$x4 = round(x$cur, digits = 0)
x$x5 = x$alg + 1
#Define LCA function
f <- cbind(x1, x2, x3, x4, x5) ~ 1
#Load Library for LCA
library(poLCA)
#Write function to find best fitting model
#min = 2 classes, max = 5 classes (trouble with convergence above 5)
min_bic <- 100000
for(i in 2:5){
lc <- poLCA(f, x, nclass=i,
maxiter=3000, tol=1e-5,
na.rm=FALSE, nrep=10,
verbose=TRUE, calc.se=TRUE)
if(lc$bic < min_bic){
min_bic <- lc$bic
LCA_best_model <- lc
}
}
print(LCA_best_model)
lc <- poLCA(f, x, nclass=4,
maxiter=3000, tol=1e-5,
na.rm=TRUE,  nrep=10,
verbose=TRUE, calc.se=TRUE,
graph=TRUE)
probs.start <- poLCA.reorder(lc$probs.start,
order(lc$P, decreasing=TRUE)) #create object for order
lc <- poLCA(f, x, nclass = 4,
maxiter=3000, tol=1e-5,
na.rm=TRUE, nrep=10,
verbose=TRUE, calc.se=TRUE,
probs.start = probs.start,
graph=TRUE) #refit model with order object (probs.start)
#Melt Data for Visualizations
lcmodel <- reshape2::melt(lc$probs, level=2)
levels(lcmodel$Var1) = c("Mod Unmot", "Low", "Mod Mot", "High")
lcmodel$Var1 <- factor(lcmodel$Var1, levels = c("Low", "Mod Unmot", "Mod Mot", "High"))
lcmodel$L1[lcmodel$L2=="x1"] <- "Perception"
lcmodel$L1[lcmodel$L2=="x2"] <- "Interest"
lcmodel$L1[lcmodel$L2=="x3"] <- "Follows"
lcmodel$L1[lcmodel$L2=="x4"] <- "Curation"
lcmodel$L1[lcmodel$L2=="x5"] <- "Algorithm"
rm(f,
i,
min_bic,
LCA_best_model,
probs.start)
detach("package:poLCA", unload=TRUE)
#Extract grouping variable and add to dataset
x$inv = as.factor(lc$predclass)
levels(x$inv) = c("Mod Unmot", "Low", "Mod Mot", "High")
x$inv <- factor(x$inv, levels = c("Low", "Mod Unmot", "Mod Mot", "High"))
table(x$inv)
library(lme4)
library(lmerTest)
#Center Controls
x <- x %>%
group_by(frame) %>%
mutate(age.c = age-mean(age))
x <- x %>%
group_by(frame) %>%
mutate(female.c = female-mean(female))
x <- x %>%
group_by(frame) %>%
mutate(poc.c = poc-mean(poc))
x <- x %>%
group_by(frame) %>%
mutate(edu.c = edu-mean(edu))
x <- x %>%
group_by(frame) %>%
mutate(inc.c = inc-mean(inc))
x <- x %>%
group_by(frame) %>%
mutate(ideo.c = ideo-mean(ideo))
x <- x %>%
group_by(frame) %>%
mutate(pid.c = pid-mean(pid))
x <- x %>%
group_by(frame) %>%
mutate(sm.freq.c = sm.freq-mean(sm.freq))
x <- x %>%
group_by(frame) %>%
mutate(size.c = size-mean(size))
x <- x %>%
group_by(frame) %>%
mutate(div.c = div-mean(div))
x <- x %>%
group_by(frame) %>%
mutate(grp.c = grp-mean(grp))
lm1 = lmer(ipe ~ inv +
age.c + female.c + poc.c + edu.c + inc.c + ideo.c + pid.c +
sm.freq.c + size.c + div.c + grp.c +
(1 | frame),
data=x, weights=weights,
control=lmerControl(optimizer="bobyqa"))
rm1 = lm(ipe ~ inv +
age.c + female.c + poc.c + edu.c + inc.c + ideo.c + pid.c +
sm.freq.c + size.c + div.c + grp.c,
data=x, weights=weights)
summary(lm1, cor=FALSE)
options(scipen=999)
summary(lm1, cor=FALSE)
summary(rm1)
anova(lm1, rm1)
lm2 = lmer(pol ~ inv +
age.c + female.c + poc.c + edu.c + inc.c + ideo.c + pid.c +
sm.freq.c + size.c + div.c + grp.c +
(1 | frame),
data=x, weights=weights,
control=lmerControl(optimizer="bobyqa"))
rm2 = lm(pol ~ inv +
age.c + female.c + poc.c + edu.c + inc.c + ideo.c + pid.c +
sm.freq.c + size.c + div.c + grp.c,
data=x, weights=weights)
summary(lm2, cor=FALSE)
summary(rm2)
anova(lm2, rm2)
anova(lm1, rm1)
rm3 = lmer(ipe ~ inv +
age.c + female.c + poc.c + edu.c + inc.c + ideo.c + pid.c +
sm.freq.c + size.c + div.c + grp.c +
(1 | frame),
data=x,
control=lmerControl(optimizer="bobyqa"))
rm4 = lmer(pol ~ inv +
age.c + female.c + poc.c + edu.c + inc.c + ideo.c + pid.c +
sm.freq.c + size.c + div.c + grp.c +
(1 | frame),
data=x,
control=lmerControl(optimizer="bobyqa"))
summary(rm3, cor=FALSE)
summary(rm4, cor=FALSE)
summary(rm3, cor=FALSE)
